// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(LegacyDbContext))]
    [Migration("20251006234513_FixMissingTables")]
    partial class FixMissingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.HasKey("AnswerId")
                        .HasName("PK__Answers__D48250249C0763D2");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Core.Models.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcceptedBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("AcceptedTrackId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ApplicationPasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.PrimitiveCollection<string>("SelectedBranches")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("SelectedTracks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("ToBeDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationCode")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("ToBeDeleted");

                    b.ToTable("Applicants", (string)null);
                });

            modelBuilder.Entity("Core.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BranchId")
                        .HasName("PK__Branches__A1682FA58225D397");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("IX_Branches_ManagerID")
                        .HasFilter("[ManagerID] IS NOT NULL");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Core.Models.BranchTrack", b =>
                {
                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("TrackID")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorID")
                        .HasColumnType("int");

                    b.HasKey("BranchID", "TrackID");

                    b.HasIndex("SupervisorID");

                    b.HasIndex("TrackID");

                    b.ToTable("BranchTracks", (string)null);
                });

            modelBuilder.Entity("Core.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D7187C9326206");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Core.Models.CoursePolicy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PolicyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"));

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime");

                    b.Property<int>("ManagedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("PassPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("TrackCourseId")
                        .HasColumnType("int")
                        .HasColumnName("TrackCourseID");

                    b.HasKey("PolicyId")
                        .HasName("PK__CoursePo__2E13394462810DAD");

                    b.HasIndex("ManagedBy");

                    b.HasIndex("TrackCourseId");

                    b.ToTable("CoursePolicies");
                });

            modelBuilder.Entity("Core.Models.ExamQuestion", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions", (string)null);
                });

            modelBuilder.Entity("Core.Models.InstructorCourse", b =>
                {
                    b.Property<int>("InstructorCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstructorCourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorCourseId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<bool>("IsOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("InstructorCourseId")
                        .HasName("PK__Instruct__2724B1A9438B5974");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorCourses");
                });

            modelBuilder.Entity("Core.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LogId")
                        .HasName("PK__Logs__5E5499A83430A1B2");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06F8CA6C29252");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Type").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Models.StudentAnswer", b =>
                {
                    b.Property<int>("StudentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAnswerId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<int>("StudentExamId")
                        .HasColumnType("int")
                        .HasColumnName("StudentExamID");

                    b.HasKey("StudentAnswerId")
                        .HasName("PK__StudentA__6E3EA4E506E73BB3");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentExamId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("Core.Models.StudentExam", b =>
                {
                    b.Property<int>("StudentExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentExamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentExamId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime");

                    b.HasKey("StudentExamId")
                        .HasName("PK__StudentE__C5794956A9DE0192");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExams");
                });

            modelBuilder.Entity("Core.Models.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TrackId")
                        .HasName("PK__Tracks__7A74F8C01EF50B60");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Core.Models.TrackCourse", b =>
                {
                    b.Property<int>("TrackCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackCourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackCourseId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    b.HasKey("TrackCourseId")
                        .HasName("PK__TrackCou__C105F51ADC10E12B");

                    b.HasIndex("CourseId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackCourses");
                });

            modelBuilder.Entity("Core.Models.Translation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TranslationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslationId"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TranslatedText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranslationId")
                        .HasName("PK__Translat__663DA0ACE6F6B643");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACC19097F5");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4EEE82DF7")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Role").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("FullMark")
                        .HasColumnType("int");

                    b.Property<int>("PassMark")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TrackCourseId")
                        .HasColumnType("int")
                        .HasColumnName("TrackCourseID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ExamId")
                        .HasName("PK__Exams__297521A7A4309009");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TrackCourseId");

                    b.ToTable("Exams");

                    b.HasDiscriminator<string>("Type").HasValue("Exam");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Models.ChooseAllQuestion", b =>
                {
                    b.HasBaseType("Core.Models.Question");

                    b.HasDiscriminator().HasValue("ChooseAll");
                });

            modelBuilder.Entity("Core.Models.ChooseOneQuestion", b =>
                {
                    b.HasBaseType("Core.Models.Question");

                    b.HasDiscriminator().HasValue("ChooseOne");
                });

            modelBuilder.Entity("Core.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("Core.Models.Question");

                    b.HasDiscriminator().HasValue("TrueFalse");
                });

            modelBuilder.Entity("Core.Models.Admin", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Core.Models.Instructor", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<int>("BranchId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.HasIndex("BranchId");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("Core.Models.Student", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<int>("BranchId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    b.HasIndex("BranchId");

                    b.HasIndex("TrackId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Core.Models.FinalExam", b =>
                {
                    b.HasBaseType("Exam");

                    b.HasDiscriminator().HasValue("Final");
                });

            modelBuilder.Entity("Core.Models.PracticeExam", b =>
                {
                    b.HasBaseType("Exam");

                    b.HasDiscriminator().HasValue("Practice");
                });

            modelBuilder.Entity("Core.Models.Answer", b =>
                {
                    b.HasOne("Core.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Models.Branch", b =>
                {
                    b.HasOne("Core.Models.Instructor", "Manager")
                        .WithOne("ManagedBranch")
                        .HasForeignKey("Core.Models.Branch", "ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Branch_Manager");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Core.Models.BranchTrack", b =>
                {
                    b.HasOne("Core.Models.Branch", "Branch")
                        .WithMany("BranchTracks")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Instructor", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Track", "Track")
                        .WithMany("BranchTracks")
                        .HasForeignKey("TrackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Supervisor");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Core.Models.CoursePolicy", b =>
                {
                    b.HasOne("Core.Models.User", "ManagedByNavigation")
                        .WithMany("CoursePolicies")
                        .HasForeignKey("ManagedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CoursePolicies_Manager");

                    b.HasOne("Core.Models.TrackCourse", "TrackCourse")
                        .WithMany("CoursePolicies")
                        .HasForeignKey("TrackCourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CoursePolicies_TrackCourse");

                    b.Navigation("ManagedByNavigation");

                    b.Navigation("TrackCourse");
                });

            modelBuilder.Entity("Core.Models.ExamQuestion", b =>
                {
                    b.HasOne("Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamQuestions_Exam");

                    b.HasOne("Core.Models.Question", "Question")
                        .WithMany("Exams")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamQuestions_Question");

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Models.InstructorCourse", b =>
                {
                    b.HasOne("Core.Models.Course", "Course")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_InstructorCourses_Course");

                    b.HasOne("Core.Models.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_InstructorCourses_Instructor");

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Core.Models.Log", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Logs_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.HasOne("Core.Models.Course", "Course")
                        .WithMany("Questions")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_Course");

                    b.HasOne("Core.Models.Instructor", "CreatedByNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_CreatedBy");

                    b.Navigation("Course");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Core.Models.StudentAnswer", b =>
                {
                    b.HasOne("Core.Models.Answer", "Answer")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_StudentAnswers_Answer");

                    b.HasOne("Core.Models.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswers_Question");

                    b.HasOne("Core.Models.StudentExam", "StudentExam")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("StudentExamId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswers_StudentExam");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("StudentExam");
                });

            modelBuilder.Entity("Core.Models.StudentExam", b =>
                {
                    b.HasOne("Exam", "Exam")
                        .WithMany("StudentExams")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentExams_Exam");

                    b.HasOne("Core.Models.Student", "Student")
                        .WithMany("StudentExams")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentExams_Student");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Models.TrackCourse", b =>
                {
                    b.HasOne("Core.Models.Course", "Course")
                        .WithMany("TrackCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_TrackCourses_Course");

                    b.HasOne("Core.Models.Track", "Track")
                        .WithMany("TrackCourses")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK_TrackCourses_Track");

                    b.Navigation("Course");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Exam", b =>
                {
                    b.HasOne("Core.Models.Instructor", "CreatedByNavigation")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Exams_CreatedBy");

                    b.HasOne("Core.Models.TrackCourse", "TrackCourse")
                        .WithMany("Exams")
                        .HasForeignKey("TrackCourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Exams_TrackCourse");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TrackCourse");
                });

            modelBuilder.Entity("Core.Models.Instructor", b =>
                {
                    b.HasOne("Core.Models.Branch", "Branch")
                        .WithMany("Instructors")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Core.Models.Student", b =>
                {
                    b.HasOne("Core.Models.Branch", "Branch")
                        .WithMany("Students")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Core.Models.Answer", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("Core.Models.Branch", b =>
                {
                    b.Navigation("BranchTracks");

                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Models.Course", b =>
                {
                    b.Navigation("InstructorCourses");

                    b.Navigation("Questions");

                    b.Navigation("TrackCourses");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Exams");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("Core.Models.StudentExam", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("Core.Models.Track", b =>
                {
                    b.Navigation("BranchTracks");

                    b.Navigation("TrackCourses");
                });

            modelBuilder.Entity("Core.Models.TrackCourse", b =>
                {
                    b.Navigation("CoursePolicies");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("CoursePolicies");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentExams");
                });

            modelBuilder.Entity("Core.Models.Instructor", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorCourses");

                    b.Navigation("ManagedBranch");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Core.Models.Student", b =>
                {
                    b.Navigation("StudentExams");
                });
#pragma warning restore 612, 618
        }
    }
}
